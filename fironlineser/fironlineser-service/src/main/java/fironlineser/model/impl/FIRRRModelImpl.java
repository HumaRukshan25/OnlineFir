/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package fironlineser.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import fironlineser.model.FIRRR;
import fironlineser.model.FIRRRModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FIRRR service. Represents a row in the &quot;FIRFOO_FIRRR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FIRRRModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FIRRRImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FIRRRImpl
 * @generated
 */
public class FIRRRModelImpl extends BaseModelImpl<FIRRR> implements FIRRRModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a firrr model instance should use the <code>FIRRR</code> interface instead.
	 */
	public static final String TABLE_NAME = "FIRFOO_FIRRR";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"firId", Types.BIGINT},
		{"complainantName", Types.VARCHAR}, {"incidentDate", Types.TIMESTAMP},
		{"incidentDetails", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"timeline", Types.VARCHAR}, {"modificationDetails", Types.VARCHAR},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("complainantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("incidentDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("incidentDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timeline", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modificationDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FIRFOO_FIRRR (uuid_ VARCHAR(75) null,firId LONG not null primary key,complainantName VARCHAR(75) null,incidentDate DATE null,incidentDetails VARCHAR(75) null,status VARCHAR(75) null,timeline VARCHAR(75) null,modificationDetails VARCHAR(75) null,userId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table FIRFOO_FIRRR";

	public static final String ORDER_BY_JPQL = " ORDER BY firrr.firId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FIRFOO_FIRRR.firId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FIRID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FIRRRModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _firId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFirId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _firId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FIRRR.class;
	}

	@Override
	public String getModelClassName() {
		return FIRRR.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FIRRR, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FIRRR, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FIRRR, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((FIRRR)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FIRRR, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FIRRR, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((FIRRR)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FIRRR, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FIRRR, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FIRRR, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FIRRR, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<FIRRR, Object>>();

			attributeGetterFunctions.put("uuid", FIRRR::getUuid);
			attributeGetterFunctions.put("firId", FIRRR::getFirId);
			attributeGetterFunctions.put(
				"complainantName", FIRRR::getComplainantName);
			attributeGetterFunctions.put(
				"incidentDate", FIRRR::getIncidentDate);
			attributeGetterFunctions.put(
				"incidentDetails", FIRRR::getIncidentDetails);
			attributeGetterFunctions.put("status", FIRRR::getStatus);
			attributeGetterFunctions.put("timeline", FIRRR::getTimeline);
			attributeGetterFunctions.put(
				"modificationDetails", FIRRR::getModificationDetails);
			attributeGetterFunctions.put("userId", FIRRR::getUserId);
			attributeGetterFunctions.put("createDate", FIRRR::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FIRRR::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<FIRRR, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FIRRR, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<FIRRR, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<FIRRR, String>)FIRRR::setUuid);
			attributeSetterBiConsumers.put(
				"firId", (BiConsumer<FIRRR, Long>)FIRRR::setFirId);
			attributeSetterBiConsumers.put(
				"complainantName",
				(BiConsumer<FIRRR, String>)FIRRR::setComplainantName);
			attributeSetterBiConsumers.put(
				"incidentDate",
				(BiConsumer<FIRRR, Date>)FIRRR::setIncidentDate);
			attributeSetterBiConsumers.put(
				"incidentDetails",
				(BiConsumer<FIRRR, String>)FIRRR::setIncidentDetails);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<FIRRR, String>)FIRRR::setStatus);
			attributeSetterBiConsumers.put(
				"timeline", (BiConsumer<FIRRR, String>)FIRRR::setTimeline);
			attributeSetterBiConsumers.put(
				"modificationDetails",
				(BiConsumer<FIRRR, String>)FIRRR::setModificationDetails);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<FIRRR, Long>)FIRRR::setUserId);
			attributeSetterBiConsumers.put(
				"createDate", (BiConsumer<FIRRR, Date>)FIRRR::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FIRRR, Date>)FIRRR::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getFirId() {
		return _firId;
	}

	@Override
	public void setFirId(long firId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firId = firId;
	}

	@Override
	public String getComplainantName() {
		if (_complainantName == null) {
			return "";
		}
		else {
			return _complainantName;
		}
	}

	@Override
	public void setComplainantName(String complainantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_complainantName = complainantName;
	}

	@Override
	public Date getIncidentDate() {
		return _incidentDate;
	}

	@Override
	public void setIncidentDate(Date incidentDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_incidentDate = incidentDate;
	}

	@Override
	public String getIncidentDetails() {
		if (_incidentDetails == null) {
			return "";
		}
		else {
			return _incidentDetails;
		}
	}

	@Override
	public void setIncidentDetails(String incidentDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_incidentDetails = incidentDetails;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public String getTimeline() {
		if (_timeline == null) {
			return "";
		}
		else {
			return _timeline;
		}
	}

	@Override
	public void setTimeline(String timeline) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_timeline = timeline;
	}

	@Override
	public String getModificationDetails() {
		if (_modificationDetails == null) {
			return "";
		}
		else {
			return _modificationDetails;
		}
	}

	@Override
	public void setModificationDetails(String modificationDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modificationDetails = modificationDetails;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, FIRRR.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FIRRR toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FIRRR>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FIRRRImpl firrrImpl = new FIRRRImpl();

		firrrImpl.setUuid(getUuid());
		firrrImpl.setFirId(getFirId());
		firrrImpl.setComplainantName(getComplainantName());
		firrrImpl.setIncidentDate(getIncidentDate());
		firrrImpl.setIncidentDetails(getIncidentDetails());
		firrrImpl.setStatus(getStatus());
		firrrImpl.setTimeline(getTimeline());
		firrrImpl.setModificationDetails(getModificationDetails());
		firrrImpl.setUserId(getUserId());
		firrrImpl.setCreateDate(getCreateDate());
		firrrImpl.setModifiedDate(getModifiedDate());

		firrrImpl.resetOriginalValues();

		return firrrImpl;
	}

	@Override
	public FIRRR cloneWithOriginalValues() {
		FIRRRImpl firrrImpl = new FIRRRImpl();

		firrrImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		firrrImpl.setFirId(this.<Long>getColumnOriginalValue("firId"));
		firrrImpl.setComplainantName(
			this.<String>getColumnOriginalValue("complainantName"));
		firrrImpl.setIncidentDate(
			this.<Date>getColumnOriginalValue("incidentDate"));
		firrrImpl.setIncidentDetails(
			this.<String>getColumnOriginalValue("incidentDetails"));
		firrrImpl.setStatus(this.<String>getColumnOriginalValue("status"));
		firrrImpl.setTimeline(this.<String>getColumnOriginalValue("timeline"));
		firrrImpl.setModificationDetails(
			this.<String>getColumnOriginalValue("modificationDetails"));
		firrrImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		firrrImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		firrrImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return firrrImpl;
	}

	@Override
	public int compareTo(FIRRR firrr) {
		long primaryKey = firrr.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FIRRR)) {
			return false;
		}

		FIRRR firrr = (FIRRR)object;

		long primaryKey = firrr.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FIRRR> toCacheModel() {
		FIRRRCacheModel firrrCacheModel = new FIRRRCacheModel();

		firrrCacheModel.uuid = getUuid();

		String uuid = firrrCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			firrrCacheModel.uuid = null;
		}

		firrrCacheModel.firId = getFirId();

		firrrCacheModel.complainantName = getComplainantName();

		String complainantName = firrrCacheModel.complainantName;

		if ((complainantName != null) && (complainantName.length() == 0)) {
			firrrCacheModel.complainantName = null;
		}

		Date incidentDate = getIncidentDate();

		if (incidentDate != null) {
			firrrCacheModel.incidentDate = incidentDate.getTime();
		}
		else {
			firrrCacheModel.incidentDate = Long.MIN_VALUE;
		}

		firrrCacheModel.incidentDetails = getIncidentDetails();

		String incidentDetails = firrrCacheModel.incidentDetails;

		if ((incidentDetails != null) && (incidentDetails.length() == 0)) {
			firrrCacheModel.incidentDetails = null;
		}

		firrrCacheModel.status = getStatus();

		String status = firrrCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			firrrCacheModel.status = null;
		}

		firrrCacheModel.timeline = getTimeline();

		String timeline = firrrCacheModel.timeline;

		if ((timeline != null) && (timeline.length() == 0)) {
			firrrCacheModel.timeline = null;
		}

		firrrCacheModel.modificationDetails = getModificationDetails();

		String modificationDetails = firrrCacheModel.modificationDetails;

		if ((modificationDetails != null) &&
			(modificationDetails.length() == 0)) {

			firrrCacheModel.modificationDetails = null;
		}

		firrrCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			firrrCacheModel.createDate = createDate.getTime();
		}
		else {
			firrrCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			firrrCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			firrrCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return firrrCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FIRRR, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FIRRR, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FIRRR, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FIRRR)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FIRRR>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FIRRR.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _firId;
	private String _complainantName;
	private Date _incidentDate;
	private String _incidentDetails;
	private String _status;
	private String _timeline;
	private String _modificationDetails;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FIRRR, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FIRRR)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("firId", _firId);
		_columnOriginalValues.put("complainantName", _complainantName);
		_columnOriginalValues.put("incidentDate", _incidentDate);
		_columnOriginalValues.put("incidentDetails", _incidentDetails);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("timeline", _timeline);
		_columnOriginalValues.put("modificationDetails", _modificationDetails);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("firId", 2L);

		columnBitmasks.put("complainantName", 4L);

		columnBitmasks.put("incidentDate", 8L);

		columnBitmasks.put("incidentDetails", 16L);

		columnBitmasks.put("status", 32L);

		columnBitmasks.put("timeline", 64L);

		columnBitmasks.put("modificationDetails", 128L);

		columnBitmasks.put("userId", 256L);

		columnBitmasks.put("createDate", 512L);

		columnBitmasks.put("modifiedDate", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FIRRR _escapedModel;

}