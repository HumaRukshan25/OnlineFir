/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package fironlineser.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import fironlineser.model.SignupUser;
import fironlineser.model.SignupUserModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SignupUser service. Represents a row in the &quot;FIRFOO_SignupUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SignupUserModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SignupUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SignupUserImpl
 * @generated
 */
public class SignupUserModelImpl
	extends BaseModelImpl<SignupUser> implements SignupUserModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a signup user model instance should use the <code>SignupUser</code> interface instead.
	 */
	public static final String TABLE_NAME = "FIRFOO_SignupUser";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"signupUserId", Types.BIGINT},
		{"loginName", Types.VARCHAR}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"phoneNo", Types.VARCHAR}, {"password_", Types.VARCHAR},
		{"role_", Types.VARCHAR}, {"active_", Types.BOOLEAN},
		{"activationToken", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signupUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("loginName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("role_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("activationToken", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FIRFOO_SignupUser (uuid_ VARCHAR(75) null,signupUserId LONG not null primary key,loginName VARCHAR(75) null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,email VARCHAR(75) null,phoneNo VARCHAR(75) null,password_ VARCHAR(75) null,role_ VARCHAR(75) null,active_ BOOLEAN,activationToken VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table FIRFOO_SignupUser";

	public static final String ORDER_BY_JPQL =
		" ORDER BY signupUser.signupUserId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FIRFOO_SignupUser.signupUserId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACTIVATIONTOKEN_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAIL_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SIGNUPUSERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SignupUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _signupUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSignupUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _signupUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SignupUser.class;
	}

	@Override
	public String getModelClassName() {
		return SignupUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SignupUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SignupUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SignupUser, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((SignupUser)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SignupUser, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SignupUser, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SignupUser)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SignupUser, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SignupUser, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<SignupUser, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<SignupUser, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<SignupUser, Object>>();

			attributeGetterFunctions.put("uuid", SignupUser::getUuid);
			attributeGetterFunctions.put(
				"signupUserId", SignupUser::getSignupUserId);
			attributeGetterFunctions.put("loginName", SignupUser::getLoginName);
			attributeGetterFunctions.put("firstName", SignupUser::getFirstName);
			attributeGetterFunctions.put("lastName", SignupUser::getLastName);
			attributeGetterFunctions.put("email", SignupUser::getEmail);
			attributeGetterFunctions.put("phoneNo", SignupUser::getPhoneNo);
			attributeGetterFunctions.put("password_", SignupUser::getPassword_);
			attributeGetterFunctions.put("role", SignupUser::getRole);
			attributeGetterFunctions.put("active", SignupUser::getActive);
			attributeGetterFunctions.put(
				"activationToken", SignupUser::getActivationToken);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<SignupUser, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SignupUser, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<SignupUser, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<SignupUser, String>)SignupUser::setUuid);
			attributeSetterBiConsumers.put(
				"signupUserId",
				(BiConsumer<SignupUser, Long>)SignupUser::setSignupUserId);
			attributeSetterBiConsumers.put(
				"loginName",
				(BiConsumer<SignupUser, String>)SignupUser::setLoginName);
			attributeSetterBiConsumers.put(
				"firstName",
				(BiConsumer<SignupUser, String>)SignupUser::setFirstName);
			attributeSetterBiConsumers.put(
				"lastName",
				(BiConsumer<SignupUser, String>)SignupUser::setLastName);
			attributeSetterBiConsumers.put(
				"email", (BiConsumer<SignupUser, String>)SignupUser::setEmail);
			attributeSetterBiConsumers.put(
				"phoneNo",
				(BiConsumer<SignupUser, String>)SignupUser::setPhoneNo);
			attributeSetterBiConsumers.put(
				"password_",
				(BiConsumer<SignupUser, String>)SignupUser::setPassword_);
			attributeSetterBiConsumers.put(
				"role", (BiConsumer<SignupUser, String>)SignupUser::setRole);
			attributeSetterBiConsumers.put(
				"active",
				(BiConsumer<SignupUser, Boolean>)SignupUser::setActive);
			attributeSetterBiConsumers.put(
				"activationToken",
				(BiConsumer<SignupUser, String>)SignupUser::setActivationToken);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getSignupUserId() {
		return _signupUserId;
	}

	@Override
	public void setSignupUserId(long signupUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signupUserId = signupUserId;
	}

	@Override
	public String getSignupUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getSignupUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setSignupUserUuid(String signupUserUuid) {
	}

	@Override
	public String getLoginName() {
		if (_loginName == null) {
			return "";
		}
		else {
			return _loginName;
		}
	}

	@Override
	public void setLoginName(String loginName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loginName = loginName;
	}

	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmail() {
		return getColumnOriginalValue("email");
	}

	@Override
	public String getPhoneNo() {
		if (_phoneNo == null) {
			return "";
		}
		else {
			return _phoneNo;
		}
	}

	@Override
	public void setPhoneNo(String phoneNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneNo = phoneNo;
	}

	@Override
	public String getPassword_() {
		if (_password_ == null) {
			return "";
		}
		else {
			return _password_;
		}
	}

	@Override
	public void setPassword_(String password_) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password_ = password_;
	}

	@Override
	public String getRole() {
		if (_role == null) {
			return "";
		}
		else {
			return _role;
		}
	}

	@Override
	public void setRole(String role) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_role = role;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@Override
	public String getActivationToken() {
		if (_activationToken == null) {
			return "";
		}
		else {
			return _activationToken;
		}
	}

	@Override
	public void setActivationToken(String activationToken) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activationToken = activationToken;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalActivationToken() {
		return getColumnOriginalValue("activationToken");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, SignupUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SignupUser toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SignupUser>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SignupUserImpl signupUserImpl = new SignupUserImpl();

		signupUserImpl.setUuid(getUuid());
		signupUserImpl.setSignupUserId(getSignupUserId());
		signupUserImpl.setLoginName(getLoginName());
		signupUserImpl.setFirstName(getFirstName());
		signupUserImpl.setLastName(getLastName());
		signupUserImpl.setEmail(getEmail());
		signupUserImpl.setPhoneNo(getPhoneNo());
		signupUserImpl.setPassword_(getPassword_());
		signupUserImpl.setRole(getRole());
		signupUserImpl.setActive(isActive());
		signupUserImpl.setActivationToken(getActivationToken());

		signupUserImpl.resetOriginalValues();

		return signupUserImpl;
	}

	@Override
	public SignupUser cloneWithOriginalValues() {
		SignupUserImpl signupUserImpl = new SignupUserImpl();

		signupUserImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		signupUserImpl.setSignupUserId(
			this.<Long>getColumnOriginalValue("signupUserId"));
		signupUserImpl.setLoginName(
			this.<String>getColumnOriginalValue("loginName"));
		signupUserImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		signupUserImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		signupUserImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		signupUserImpl.setPhoneNo(
			this.<String>getColumnOriginalValue("phoneNo"));
		signupUserImpl.setPassword_(
			this.<String>getColumnOriginalValue("password_"));
		signupUserImpl.setRole(this.<String>getColumnOriginalValue("role_"));
		signupUserImpl.setActive(
			this.<Boolean>getColumnOriginalValue("active_"));
		signupUserImpl.setActivationToken(
			this.<String>getColumnOriginalValue("activationToken"));

		return signupUserImpl;
	}

	@Override
	public int compareTo(SignupUser signupUser) {
		long primaryKey = signupUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SignupUser)) {
			return false;
		}

		SignupUser signupUser = (SignupUser)object;

		long primaryKey = signupUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SignupUser> toCacheModel() {
		SignupUserCacheModel signupUserCacheModel = new SignupUserCacheModel();

		signupUserCacheModel.uuid = getUuid();

		String uuid = signupUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			signupUserCacheModel.uuid = null;
		}

		signupUserCacheModel.signupUserId = getSignupUserId();

		signupUserCacheModel.loginName = getLoginName();

		String loginName = signupUserCacheModel.loginName;

		if ((loginName != null) && (loginName.length() == 0)) {
			signupUserCacheModel.loginName = null;
		}

		signupUserCacheModel.firstName = getFirstName();

		String firstName = signupUserCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			signupUserCacheModel.firstName = null;
		}

		signupUserCacheModel.lastName = getLastName();

		String lastName = signupUserCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			signupUserCacheModel.lastName = null;
		}

		signupUserCacheModel.email = getEmail();

		String email = signupUserCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			signupUserCacheModel.email = null;
		}

		signupUserCacheModel.phoneNo = getPhoneNo();

		String phoneNo = signupUserCacheModel.phoneNo;

		if ((phoneNo != null) && (phoneNo.length() == 0)) {
			signupUserCacheModel.phoneNo = null;
		}

		signupUserCacheModel.password_ = getPassword_();

		String password_ = signupUserCacheModel.password_;

		if ((password_ != null) && (password_.length() == 0)) {
			signupUserCacheModel.password_ = null;
		}

		signupUserCacheModel.role = getRole();

		String role = signupUserCacheModel.role;

		if ((role != null) && (role.length() == 0)) {
			signupUserCacheModel.role = null;
		}

		signupUserCacheModel.active = isActive();

		signupUserCacheModel.activationToken = getActivationToken();

		String activationToken = signupUserCacheModel.activationToken;

		if ((activationToken != null) && (activationToken.length() == 0)) {
			signupUserCacheModel.activationToken = null;
		}

		return signupUserCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SignupUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SignupUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SignupUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((SignupUser)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SignupUser>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					SignupUser.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _signupUserId;
	private String _loginName;
	private String _firstName;
	private String _lastName;
	private String _email;
	private String _phoneNo;
	private String _password_;
	private String _role;
	private boolean _active;
	private String _activationToken;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<SignupUser, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SignupUser)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("signupUserId", _signupUserId);
		_columnOriginalValues.put("loginName", _loginName);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("phoneNo", _phoneNo);
		_columnOriginalValues.put("password_", _password_);
		_columnOriginalValues.put("role_", _role);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("activationToken", _activationToken);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("role_", "role");
		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("signupUserId", 2L);

		columnBitmasks.put("loginName", 4L);

		columnBitmasks.put("firstName", 8L);

		columnBitmasks.put("lastName", 16L);

		columnBitmasks.put("email", 32L);

		columnBitmasks.put("phoneNo", 64L);

		columnBitmasks.put("password_", 128L);

		columnBitmasks.put("role_", 256L);

		columnBitmasks.put("active_", 512L);

		columnBitmasks.put("activationToken", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SignupUser _escapedModel;

}